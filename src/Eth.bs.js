// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Formats = require("./Formats.bs.js");
var JsonRpc = require("./JsonRpc.bs.js");
var Repromise = require("@aantron/repromise/src/js/repromise.js");

function getBalance(account, $staropt$star, param) {
  var from = $staropt$star !== undefined ? $staropt$star : /* Latest */1;
  if (Formats.validateAddress(account)) {
    var params = /* array */[
      Formats.Encode[/* address */0](account),
      Formats.Encode[/* blockOrTag */3](from)
    ];
    return Repromise.map((function (result) {
                  if (result.tag) {
                    return /* Error */Block.__(1, [result[0]]);
                  } else {
                    return /* Ok */Block.__(0, [Formats.Decode[/* amount */3](result[0])]);
                  }
                }), JsonRpc.jsonRpcRequest("eth_getBalance", params));
  } else {
    return Repromise.resolved(/* Error */Block.__(1, ["Invalid Address: " + account]));
  }
}

function getTransactionCount(account, $staropt$star, param) {
  var from = $staropt$star !== undefined ? $staropt$star : /* Latest */1;
  if (Formats.validateAddress(account)) {
    var params = /* array */[
      Formats.Encode[/* address */0](account),
      Formats.Encode[/* blockOrTag */3](from)
    ];
    return Repromise.map((function (result) {
                  if (result.tag) {
                    return /* Error */Block.__(1, [result[0]]);
                  } else {
                    return /* Ok */Block.__(0, [Formats.Decode[/* nonce */1](result[0])]);
                  }
                }), JsonRpc.jsonRpcRequest("eth_getTransactionCount", params));
  } else {
    return Repromise.resolved(/* Error */Block.__(1, ["Invalid Address: " + account]));
  }
}

function blockNumber(param) {
  return Repromise.map((function (result) {
                if (result.tag) {
                  return /* Error */Block.__(1, [result[0]]);
                } else {
                  return /* Ok */Block.__(0, [Formats.Decode[/* block */2](result[0])]);
                }
              }), JsonRpc.jsonRpcRequest("eth_blockNumber", /* array */[]));
}

function gasPrice(param) {
  return Repromise.map((function (result) {
                if (result.tag) {
                  return /* Error */Block.__(1, [result[0]]);
                } else {
                  return /* Ok */Block.__(0, [Formats.Decode[/* amount */3](result[0])]);
                }
              }), JsonRpc.jsonRpcRequest("eth_gasPrice", /* array */[]));
}

function call(tx, $staropt$star, param) {
  var from = $staropt$star !== undefined ? $staropt$star : /* Latest */1;
  var address = tx.to;
  if (Formats.validateAddress(address)) {
    var params = /* array */[
      Formats.Encode[/* transaction */2](tx),
      Formats.Encode[/* blockOrTag */3](from)
    ];
    return JsonRpc.jsonRpcRequest("eth_call", params);
  } else {
    return Repromise.Rejectable[/* rejected */3]([
                Formats.InvalidAddress,
                address
              ]);
  }
}

exports.getBalance = getBalance;
exports.getTransactionCount = getTransactionCount;
exports.blockNumber = blockNumber;
exports.gasPrice = gasPrice;
exports.call = call;
/* Formats Not a pure module */
