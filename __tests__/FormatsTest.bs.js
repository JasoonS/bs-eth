// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Formats = require("../src/Formats.bs.js");

describe("Encode", (function () {
        describe("#address", (function () {
                return Jest.test("address", (function () {
                              return Jest.Expect[/* toEqual */12]("0x01234", Jest.Expect[/* expect */0](Formats.Encode[/* address */0]("0x01234")));
                            }));
              }));
        describe("#blockOrTag", (function () {
                Jest.test("small number", (function () {
                        return Jest.Expect[/* toEqual */12]("0x4d2", Jest.Expect[/* expect */0](Formats.Encode[/* blockOrTag */3](/* Block */[1234])));
                      }));
                Jest.test("zero", (function () {
                        return Jest.Expect[/* toEqual */12]("0x0", Jest.Expect[/* expect */0](Formats.Encode[/* blockOrTag */3](/* Block */[0])));
                      }));
                Jest.test("latest", (function () {
                        return Jest.Expect[/* toEqual */12]("latest", Jest.Expect[/* expect */0](Formats.Encode[/* blockOrTag */3](/* Latest */1)));
                      }));
                Jest.test("pending", (function () {
                        return Jest.Expect[/* toEqual */12]("pending", Jest.Expect[/* expect */0](Formats.Encode[/* blockOrTag */3](/* Pending */2)));
                      }));
                return Jest.test("earliest", (function () {
                              return Jest.Expect[/* toEqual */12]("earliest", Jest.Expect[/* expect */0](Formats.Encode[/* blockOrTag */3](/* Earliest */0)));
                            }));
              }));
        return /* () */0;
      }));

describe("Decode", (function () {
        describe("quantity", (function () {
                return Jest.test("smallish number", (function () {
                              return Jest.Expect[/* toEqual */12](1234, Jest.Expect[/* expect */0](Formats.Decode[/* quantity */0]("0x4d2")));
                            }));
              }));
        return /* () */0;
      }));

/*  Not a pure module */
