// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE
'use strict';

var Bn = require("bs-bn.js/src/Bn.js");
var Eth = require("../src/Eth.bs.js");
var Jest = require("@glennsl/bs-jest/src/jest.js");
var Repromise = require("@aantron/repromise/src/js/repromise.js");

Jest.describe("#blockNumber", (function (param) {
        return Jest.testPromise("fetches block", undefined, (function (param) {
                      return Repromise.Rejectable[/* toJsPromise */11](Repromise.Rejectable[/* map */5]((function (result) {
                                        if (result.tag) {
                                          return Jest.fail("No error should happen");
                                        } else {
                                          return Jest.Expect[/* toBeGreaterThan */5](5768135, Jest.Expect[/* expect */0](result[0]));
                                        }
                                      }), Eth.blockNumber(/* () */0)));
                    }));
      }));

Jest.describe("#getBalance", (function (param) {
        Jest.testPromise("invalid address", undefined, (function (param) {
                return Repromise.Rejectable[/* toJsPromise */11](Repromise.Rejectable[/* map */5]((function (result) {
                                  if (result.tag) {
                                    return Jest.Expect[/* toEqual */12]("Invalid Address: 0x1234", Jest.Expect[/* expect */0](result[0]));
                                  } else {
                                    return Jest.fail("this should not work");
                                  }
                                }), Eth.getBalance("0x1234", undefined, /* () */0)));
              }));
        Jest.testPromise("empty Balance", undefined, (function (param) {
                return Repromise.Rejectable[/* toJsPromise */11](Repromise.Rejectable[/* map */5]((function (result) {
                                  if (result.tag) {
                                    return Jest.fail(result[0]);
                                  } else {
                                    return Jest.Expect[/* toEqual */12](0.0, Jest.Expect[/* expect */0](Bn.toNumber(result[0])));
                                  }
                                }), Eth.getBalance("0x160c5ce58e2cc4fe7cc45a9dd569a10083b2a275", undefined, /* () */0)));
              }));
        return Jest.testPromise("With Balance at block", undefined, (function (param) {
                      return Repromise.Rejectable[/* toJsPromise */11](Repromise.Rejectable[/* map */5]((function (result) {
                                        if (result.tag) {
                                          return Jest.fail(result[0]);
                                        } else {
                                          return Jest.Expect[/* toEqual */12]("6000000000000000", Jest.Expect[/* expect */0](Bn.toString(10, undefined)(result[0])));
                                        }
                                      }), Eth.getBalance("0x76CF5100f62BaBd1574c3d2082f01c6bb3b420f8", /* Block */[5768167], /* () */0)));
                    }));
      }));

Jest.describe("#getTransactionCount", (function (param) {
        Jest.testPromise("with 1 transaction", undefined, (function (param) {
                return Repromise.Rejectable[/* toJsPromise */11](Repromise.Rejectable[/* map */5]((function (result) {
                                  if (result.tag) {
                                    return Jest.fail(result[0]);
                                  } else {
                                    return Jest.Expect[/* toEqual */12](1, Jest.Expect[/* expect */0](result[0]));
                                  }
                                }), Eth.getTransactionCount("0x160c5ce58e2cc4fe7cc45a9dd569a10083b2a275", undefined, /* () */0)));
              }));
        return Jest.testPromise("with no transactions", undefined, (function (param) {
                      return Repromise.Rejectable[/* toJsPromise */11](Repromise.Rejectable[/* map */5]((function (result) {
                                        if (result.tag) {
                                          return Jest.fail(result[0]);
                                        } else {
                                          return Jest.Expect[/* toEqual */12](0, Jest.Expect[/* expect */0](result[0]));
                                        }
                                      }), Eth.getTransactionCount("0x76CF5100f62BaBd1574c3d2082f01c6bb3b420f8", /* Block */[5768167], /* () */0)));
                    }));
      }));

Jest.describe("#gasPrice", (function (param) {
        return Jest.testPromise("fetches gas price in wei", undefined, (function (param) {
                      return Repromise.Rejectable[/* toJsPromise */11](Repromise.Rejectable[/* map */5]((function (result) {
                                        if (result.tag) {
                                          return Jest.fail(result[0]);
                                        } else {
                                          return Jest.Expect[/* toBeGreaterThanOrEqual */6](2000000000.0, Jest.Expect[/* expect */0](Bn.toNumber(result[0])));
                                        }
                                      }), Eth.gasPrice(/* () */0)));
                    }));
      }));

Jest.describe("#call", (function (param) {
        Jest.testPromise("calls contract with no result", undefined, (function (param) {
                return Repromise.Rejectable[/* toJsPromise */11](Repromise.Rejectable[/* map */5]((function (result) {
                                  if (result.tag) {
                                    return Jest.fail(result[0]);
                                  } else {
                                    return Jest.Expect[/* toBe */2]("0x", Jest.Expect[/* expect */0](result[0]));
                                  }
                                }), Eth.call({
                                    to: "0x160c5ce58e2cc4fe7cc45a9dd569a10083b2a275"
                                  }, undefined, /* () */0)));
              }));
        return Jest.testPromise("calls contract with data", undefined, (function (param) {
                      return Repromise.Rejectable[/* toJsPromise */11](Repromise.Rejectable[/* map */5]((function (result) {
                                        if (result.tag) {
                                          return Jest.fail(result[0]);
                                        } else {
                                          return Jest.Expect[/* toBe */2]("0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000034241540000000000000000000000000000000000000000000000000000000000", Jest.Expect[/* expect */0](result[0]));
                                        }
                                      }), Eth.call({
                                          to: "0x0D8775F648430679A709E98d2b0Cb6250d2887EF",
                                          data: "0x95d89b41"
                                        }, /* Block */[5768167], /* () */0)));
                    }));
      }));

/*  Not a pure module */
